kind: pipeline
type: docker
name: default

trigger:
  event:
    - push
    - tag

services:
  - name: vault
    image: vault:1.5.3
    ports:
      - 8200
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root-token"

  - name: mysql
    image: mysql:8
    ports:
      - 3306
    environment:
      MYSQL_DATABASE: "kaigara_opendax_uat"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"

  - name: postgres
    image: postgres:13.3-alpine
    ports:
      - 5432
    command:
      - postgres
      - -c
      - wal_level=logical
      - -N 500
    environment:
      POSTGRES_DB: kaigara_opendax_uat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeme

steps:
  - name: Wait for services
    image: jwilder/dockerize
    pull: if-not-exists
    commands:
      - dockerize -wait tcp://postgres:5432 -wait tcp://mysql:3306 -wait tcp://vault:8200 -timeout 2m

  - name: Enable Vault Transit
    image: vault:1.5.3
    environment:
      VAULT_ADDR: "http://vault:8200"
      VAULT_TOKEN: "root-token"
    commands:
      - vault secrets enable transit

  - name: Restore lint cache
    pull: if-not-exists
    image: drillster/drone-volume-cache
    volumes:
    - name: golint-cache
      path: /golint-cache
    settings:
      restore: true
      mount:
      - .cache/golangci-lint
    when:
      branch:
        exclude:
          - "master"
          - "*stable"

  - name: Go lint
    image: golangci/golangci-lint:v1.49-alpine
    environment:
      GOLANGCI_LINT_CACHE: "/drone/src/.cache/golangci-lint"
    commands:
      - golangci-lint cache status
      - golangci-lint run --timeout 3m0s
    when:
      branch:
        exclude:
          - "master"
          - "*stable"

  - name: Rebuild lint cache
    pull: if-not-exists
    image: drillster/drone-volume-cache
    volumes:
    - name: golint-cache
      path: /golint-cache
    settings:
      rebuild: true
      mount:
      - .cache/golangci-lint
    when:
      branch:
        exclude:
          - "master"
          - "*stable"

  - name: Go test
    image: golang:1.18
    environment:
      GO111MODULE: "on"
      COVER_OUT: cover.out
      KAIGARA_VAULT_ADDR: "http://vault:8200"
      KAIGARA_VAULT_TOKEN: "root-token"
      KAIGARA_DATABASE_HOST: "postgres"
    commands:
      - |
        counter=0
        for gpath in $(find $PWD -name go.mod); do cd $(dirname $gpath);
          for dir in $(go list ./...); do
            tmpcover=cover$counter
            go clean -testcache
            go test $dir --cover -coverprofile $tmpcover
            cat $tmpcover >> $COVER_OUT
            counter=$(( counter + 1 ))
          done
        done

  - name: Bump and tag
    image: golang:1.18
    environment:
      GITHUB_API_KEY:
        from_secret: github_api_key
      GITHUB_API_USER:
        from_secret: github_api_user
    commands:
      - go install github.com/guilhem/bump@v0.2.1
      - git remote add authenticated-origin https://$GITHUB_API_USER:$GITHUB_API_KEY@github.com/$DRONE_REPO
      - git fetch --tags authenticated-origin
      - bump patch --allow-dirty
      - git push authenticated-origin --tags
    when:
      event:
        - push
      branch:
        - master

  - name: Go Coverage
    image: golang:1.18
    environment:
      GO111MODULE: "on"
      COVER_OUT: cover.out
      ANALYTICS_DATABASE_HOST: pg.opendax.app
      ANALYTICS_DATABASE_PORT: 30432
      ANALYTICS_DATABASE_USERNAME: postgres
      ANALYTICS_DATABASE_USERNAME: coverage_analytics
      ANALYTICS_DATABASE_PASSWORD:
        from_secret: pgpass_coverage
      ANALYTICS_DATABASE_NAME: coverage_analytics
      ANALYTICS_COMPONENT: kaigara
    commands:
      - apt-get update
      - apt-get install -y p7zip-full
      - |
        curl -s -L "https://github.com/boumenot/gocover-cobertura/releases/download/v1.1.0/gocover-cobertura.linux.x64.7z" -o ./gocover-cobertura.7z
        curl -s -L https://github.com/openware/go-coverage/releases/download/v1.0.0-alpha/go-coverage -o ./go-coverage
        7z x ./gocover-cobertura.7z
        chmod +x ./gocover-cobertura
        chmod +x ./go-coverage
      - ./gocover-cobertura < $COVER_OUT > coverage.xml
      - ./go-coverage coverage.xml
    when:
      event:
        - tag

  - name: Build and publish
    image: golang:1.18
    environment:
      GO111MODULE: on
      GITHUB_API_KEY:
        from_secret: github_api_key
    commands:
      - echo $DRONE_TAG | grep -v / || exit 78 # Skip if submodule is tagged
      - go mod download
      - KAIGARA_VERSION=${DRONE_TAG} make build
      - go install github.com/tcnksm/ghr@v0.15.0
      - ghr -t $GITHUB_API_KEY -u ${DRONE_REPO_NAMESPACE} -r ${DRONE_REPO_NAME} -c ${DRONE_COMMIT} -delete ${DRONE_TAG} ./bin
    when:
      event:
        - tag
